name: ci/cd
on:
    workflow_call:
        inputs:
            repo_name:
                required: true
                type: string
            action:
                required: true
                type: string
            source_branch:
                required: true
                type: string
            target_branch:
                required: true
                type: string
            commit_sha:
                required: false
                type: string
            pr_number:
                required: false
                type: string
            pr_url:
                required: false
                type: string
            checkout_postfix_path:
                required: false
                type: string
                default: odoo/addons

env:
    # Common variables
    REPO_PATH: ${{github.workspace}}/${{inputs.checkout_postfix_path}}
    SERVER_CICD_SCRIPT_FOLDER: /tmp/odoo/cicd/${{ inputs.repo_name }}/${{inputs.target_branch}}
    ODOO_ADDONS_PATH: ${{github.workspace}}/${{inputs.checkout_postfix_path}}

    ODOO_CONFIG_FILE: ${{github.workspace}}/.github/odoo/etc/odoo.conf
    DOCKER_FOLDER: ${{github.workspace}}/.github/odoo
    ODOO_TEST_DATABASE_NAME: odoo_test
    ODOO_LOG_FILE_CONTAINER: /var/log/odoo/odoo.log
    ODOO_LOG_FILE_HOST: ${{github.workspace}}/.github/odoo/logs/odoo.log
    CICD_ODOO_OPTIONS: ${{github.workspace}}/.github/conf/odoo.json
    CICD_SCRIPTS_PATH: ${{github.workspace}}/.github/scripts
    CICD_UTILS_SCRIPTS_PATH: ${{github.workspace}}/.github/scripts/utils.sh

    # ==== Workflow inputs ====
    SOURCE_BRANCH: ${{ inputs.source_branch }}
    TARGET_BRANCH: ${{ inputs.target_branch }}
    REPOSITORY: ${{ inputs.repo_name }}
    PR_NUMBER: ${{ inputs.pr_number }}
    PR_URL: ${{ inputs.pr_url }}

    # ==== Repository secrets ====
    GH_SSH_KEY: ${{secrets.GH_SSH_KEY}}
    GH_CHECK_RUNS_MANAGER_TOKEN: ${{ secrets.GH_CHECK_RUNS_MANAGER_TOKEN }}
    GH_TOKEN: ${{secrets.GH_TOKEN}} # token use to build and push package to github container registry

    # ==== Environment secrets =====
    TELEGRAM_CHANNEL_ID: ${{secrets.TELEGRAM_CHANNEL_ID}}
    TELEGRAM_TOKEN: ${{secrets.TELEGRAM_TOKEN}}
    SERVER_PRIVATE_KEY: ${{secrets.SERVER_PRIVATE_KEY}}
    SERVER_DB_PASSWORD: ${{secrets.SERVER_DB_PASSWORD}}

    # ===== Environment variables =====
    ODOO_IMAGE_TAG_DEPLOY: ${{ vars.ODOO_IMAGE_TAG_DEPLOY }}
    ODOO_IMAGE_TAG: ${{ vars.ODOO_IMAGE_TAG }}
    DB_IMAGE_TAG: ${{ vars.DB_IMAGE_TAG }}
    SERVER_HOST: ${{ vars.SERVER_HOST }}
    SERVER_USER: ${{ vars.SERVER_USER }}
    SERVER_SSH_PORT: ${{ vars.SERVER_SSH_PORT }}
    SERVER_DEPLOY_PATH: ${{ vars.SERVER_DEPLOY_PATH }}
    SERVER_ODOO_URL: ${{ vars.SERVER_ODOO_URL }}
    SERVER_ODOO_DB_NAME: ${{ vars.SERVER_ODOO_DB_NAME }}
    SERVER_BACKUP_PATH: ${{ vars.SERVER_BACKUP_PATH }}

    # ===== Handle Input for actions/github-script ======
    INPUT_REPO_NAME: ${{inputs.repo_name}}
    INPUT_COMMIT_SHA: ${{inputs.commit_sha}}

jobs:
    #fixme: uncomment two test steps
    # unit-test-at-install:
    #     name: ${{inputs.repo_name}} - Unit test at install
    #     runs-on: ubuntu-latest
    #     environment: ${{inputs.repo_name}}/${{inputs.target_branch}}
    #     if: inputs.action == 'test' || inputs.action == 'deploy'
    #     steps:
    #         - uses: actions/checkout@v4

    #         - name: Create Check Run
    #           uses: ./.github/actions/create-check-run
    #           id: create-check-run
    #           with:
    #               name: "Unit test at install"

    #         - name: Test Preparation
    #           uses: ./.github/actions/test-preparation

    #         - name: Run Unit test cases
    #           id: run_at_install_unit_test
    #           run: |
    #               bash $CICD_SCRIPTS_PATH/run-unit-test.sh "at_install"

    #         - name: Update Check Run
    #           uses: ./.github/actions/update-check-run
    #           if: ${{always()}}
    #           id: update-check-run
    #           with:
    #               check-run-id: ${{steps.create-check-run.outputs.check-run-id}}
    #               conclusion: ${{ steps.run_at_install_unit_test.conclusion == 'success' && 'success' || 'failure' }}

    # unit-test-post-install:
    #     name: ${{inputs.repo_name}} - Unit test post install
    #     runs-on: ubuntu-latest
    #     environment: ${{inputs.repo_name}}/${{inputs.target_branch}}
    #     if: inputs.action == 'test' || inputs.action == 'deploy'
    #     steps:
    #         - uses: actions/checkout@v4

    #         - name: Create Check Run
    #           uses: ./.github/actions/create-check-run
    #           id: create-check-run
    #           with:
    #               name: "Unit test post install"

    #         - name: Test Preparation
    #           uses: ./.github/actions/test-preparation

    #         - name: Run Unit test cases
    #           id: run_post_install_unit_test
    #           run: |
    #               bash $CICD_SCRIPTS_PATH/run-unit-test.sh "post_install"

    #         - name: Update Check Run
    #           uses: ./.github/actions/update-check-run
    #           if: ${{always()}}
    #           id: update-check-run
    #           with:
    #               check-run-id: ${{steps.create-check-run.outputs.check-run-id}}
    #               conclusion: ${{ steps.run_post_install_unit_test.conclusion == 'success' && 'success' || 'failure' }}

    integration-test:
        name: ${{inputs.repo_name}} - Integration test
        runs-on: ubuntu-latest
        # fixme: uncomment if condition
        # if: inputs.action == 'deploy'

        environment: ${{inputs.repo_name}}/${{inputs.target_branch}}
        env:
            LOCAL_BACKUP_FILE_PATH: ${{github.workspace}}/odoo.zip
            SERVER_BACKUP_FOLDER: /tmp/odoo/backup/${{inputs.repo_name}}/${{inputs.target_branch}}
            SERVER_LATEST_BACKUP_FILE_PATH: /tmp/odoo/backup/${{inputs.repo_name}}/${{inputs.target_branch}}/.odoo.zip
            GITHUB_RUN_ATTEMPT: ${{github.run_attempt}}

        steps:
            - uses: actions/checkout@v4

            - name: Create Check Run
              uses: ./.github/actions/create-check-run
              id: create-check-run
              with:
                  name: "Integration test"

            - name: Test Preparation
              uses: ./.github/actions/test-preparation

            # fixme: add backup path to env,
            # fixme: if this param is provided, download backup file instead of create new backup
            # fixme; if not backup file found, switch to normal backup script

            - name: Get the latest backup file
              id: get-latest-backup-file
              uses: ./.github/actions/ssh-script
              if: ${{env.SERVER_BACKUP_PATH != ''}}
              with:
                  host: ${{env.SERVER_HOST}}
                  port: ${{env.SERVER_SSH_PORT}}
                  user: ${{env.SERVER_USER}}
                  ssh_key_text: ${{ secrets.SERVER_PRIVATE_KEY }}
                  script: |
                      echo "/backup/here/bro"

            - name: get backup file path
              run: |
                  echo ${{ steps.get-latest-backup-file.outputs }}

            - name: Upload backup script file to server
              uses: ./.github/actions/scp-ssh
              if: ${{env.SERVER_BACKUP_PATH == ''}}
              with:
                  direction: "upload"
                  host: ${{env.SERVER_HOST}}
                  port: ${{env.SERVER_SSH_PORT}}
                  user: ${{env.SERVER_USER}}
                  local_file: ${{ env.CICD_SCRIPTS_PATH }}/server-backup.sh
                  server_file: ${{ env.SERVER_CICD_SCRIPT_FOLDER }}
                  ssh_key_text: ${{ secrets.SERVER_PRIVATE_KEY }}

            - name: "Backup Odoo on server"
              uses: ./.github/actions/ssh-script
              id: backup-on-server
              with:
                  host: ${{env.SERVER_HOST}}
                  port: ${{env.SERVER_SSH_PORT}}
                  user: ${{env.SERVER_USER}}
                  ssh_key_text: ${{ secrets.SERVER_PRIVATE_KEY }}
                  script: |
                      if [[ -z ${{env.SERVER_BACKUP_PATH}} ]]; then
                        echo "download the latest backup file from existing backup folder instead of backup a new one"
                      fi
                      bash ${{ env.SERVER_CICD_SCRIPT_FOLDER }}/server-backup.sh "${{env.SERVER_DEPLOY_PATH}}" "${{env.SERVER_ODOO_DB_NAME}}" "${{secrets.SERVER_DB_PASSWORD}}" "${{env.ODOO_IMAGE_TAG_DEPLOY}}" ${{ env.GITHUB_RUN_ATTEMPT }} "${{ env.SERVER_BACKUP_FOLDER }}"

            - name: "Download backup file"
              uses: ./.github/actions/scp-ssh
              with:
                  direction: "download"
                  host: ${{env.SERVER_HOST}}
                  port: ${{env.SERVER_SSH_PORT}}
                  user: ${{env.SERVER_USER}}
                  local_file: ${{ env.LOCAL_BACKUP_FILE_PATH }}
                  server_file: ${{ env.SERVER_LATEST_BACKUP_FILE_PATH }}
                  ssh_key_text: ${{ secrets.SERVER_PRIVATE_KEY }}

            - name: "Run Integration test"
              id: run_integration_test
              run: |
                  bash ${{env.CICD_SCRIPTS_PATH}}/run-integration-test.sh "${{env.LOCAL_BACKUP_FILE_PATH}}" "${{inputs.commit_sha}}"

            - name: Update Check Run
              uses: ./.github/actions/update-check-run
              if: ${{always()}}
              id: update-check-run
              with:
                  check-run-id: ${{steps.create-check-run.outputs.check-run-id}}
                  conclusion: ${{ steps.run_integration_test.conclusion == 'success' && 'success' || 'failure' }}

    # deploy-server:
    #     name: ${{inputs.repo_name}} - Deploy server
    #     runs-on: ubuntu-latest
    #     environment: ${{inputs.repo_name}}/${{inputs.target_branch}}
    #     needs: [unit-test-at-install, unit-test-post-install, integration-test]
    #     steps:
    #         - uses: actions/checkout@v4

    #         - name: Create Check Run
    #           uses: ./.github/actions/create-check-run
    #           id: create-check-run
    #           with:
    #               name: "Deploy to Server"

    #         - name: "Upload deploy script file to server"
    #           uses: ./.github/actions/scp-ssh
    #           with:
    #               direction: "upload"
    #               host: ${{env.SERVER_HOST}}
    #               port: ${{env.SERVER_SSH_PORT}}
    #               user: ${{env.SERVER_USER}}
    #               ssh_key_text: ${{ secrets.SERVER_PRIVATE_KEY }}
    #               local_file: ${{ env.CICD_SCRIPTS_PATH }}/server-deploy.sh
    #               server_file: ${{ env.SERVER_CICD_SCRIPT_FOLDER }}

    #         - name: "Deploy to server"
    #           uses: ./.github/actions/ssh-script
    #           id: deploy_to_server
    #           env:
    #               SERVER_CUSTOM_ADDONS_PATH: ${{env.SERVER_DEPLOY_PATH}}/..
    #               SERVER_CONFIG_FILE: ${{env.SERVER_DEPLOY_PATH}}/etc/odoo.conf
    #               SERVER_DOCKER_COMPOSE_PATH: ${{env.SERVER_DEPLOY_PATH}}
    #           with:
    #               host: ${{env.SERVER_HOST}}
    #               port: ${{env.SERVER_SSH_PORT}}
    #               user: ${{env.SERVER_USER}}
    #               ssh_key_text: ${{ secrets.SERVER_PRIVATE_KEY }}
    #               script: |
    #                   bash ${{ env.SERVER_CICD_SCRIPT_FOLDER }}/server-deploy.sh "${{env.SERVER_DOCKER_COMPOSE_PATH}}" "${{env.SERVER_CUSTOM_ADDONS_PATH}}" "${{env.SERVER_CONFIG_FILE}}" "${{ env.SERVER_ODOO_URL }}" "${{ env.SERVER_ODOO_DB_NAME }}"

    #         - name: The Deploy step has failed
    #           if: ${{ failure() }}
    #           run: |
    #               bash ${{env.CICD_SCRIPTS_PATH}}/post-server-deploy.sh "failed"

    #         - name: The Deploy step has successful
    #           if: ${{ success() }}
    #           run: |
    #               bash ${{env.CICD_SCRIPTS_PATH}}/post-server-deploy.sh "success"

    #         - name: Update Check Run
    #           uses: ./.github/actions/update-check-run
    #           if: ${{always()}}
    #           id: update-check-run
    #           with:
    #               check-run-id: ${{steps.create-check-run.outputs.check-run-id}}
    #               conclusion: ${{ steps.deploy_to_server.conclusion == 'success' && 'success' || 'failure' }}
