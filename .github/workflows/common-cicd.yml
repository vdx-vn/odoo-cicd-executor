name: ci/cd
on:
    workflow_call:
        inputs:
            repo_name:
                required: true
                type: string
            action:
                required: true
                type: string
            source_branch:
                required: true
                type: string
            target_branch:
                required: true
                type: string
            commit_sha:
                required: false
                type: string
            pr_number:
                required: false
                type: string
            pr_url:
                required: false
                type: string

env:
    # Common variables
    REPO_PATH: ${{ github.workspace }}
    SERVER_CICD_SCRIPT_FOLDER: /tmp/odoo/cicd/${{ inputs.repo_name }}/${{inputs.target_branch}}
    ODOO_ADDONS_PATH: ${{ github.workspace }}
    ODOO_CONFIG_FILE: ${{ github.workspace }}/.github/odoo/etc/odoo.conf
    DOCKER_FOLDER: ${{ github.workspace }}/.github/odoo
    ODOO_TEST_DATABASE_NAME: odoo_test
    ODOO_LOG_FILE_CONTAINER: /var/log/odoo/odoo.log
    ODOO_LOG_FILE_HOST: ${{ github.workspace }}/.github/odoo/logs/odoo.log

    CICD_ODOO_OPTIONS: ${{ github.workspace }}/.github/conf/odoo.json
    CICD_SCRIPTS_PATH: ${{ github.workspace }}/.github/scripts
    CICD_UTILS_SCRIPTS_PATH: ${{ github.workspace }}/.github/scripts/utils.sh

    # ==== Workflow inputs ====
    SOURCE_BRANCH: ${{ inputs.source_branch }}
    TARGET_BRANCH: ${{ inputs.target_branch }}
    REPOSITORY: ${{ inputs.repo_name }}
    PR_NUMBER: ${{ inputs.pr_number }}
    PR_URL: ${{ inputs.pr_url }}

    # ==== Repository secrets ====
    SSH_KEY_GITHUB: ${{secrets.SSH_KEY_GITHUB}}
    PAT_GITHUB: ${{ secrets.PAT_GITHUB }}
    DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    APP_ACCESS_TOKEN: ${{ secrets.APP_ACCESS_TOKEN }}

    # ==== Environment secrets =====
    TELEGRAM_CHANNEL_ID: ${{secrets.TELEGRAM_CHANNEL_ID}}
    TELEGRAM_TOKEN: ${{secrets.TELEGRAM_TOKEN}}
    SERVER_PRIVATE_KEY: ${{secrets.SERVER_PRIVATE_KEY}}
    SERVER_DB_PASSWORD: ${{secrets.SERVER_DB_PASSWORD}}
    PRIVATE_KEY_FOR_GITHUB_AUTHEN: ${{secrets.PRIVATE_KEY_FOR_GITHUB_AUTHEN}}

    # ===== Environment variables =====
    ODOO_IMAGE_TAG: ${{ vars.ODOO_IMAGE_TAG }}
    DB_IMAGE_TAG: ${{ vars.DB_IMAGE_TAG }}
    SERVER_HOST: ${{ vars.SERVER_HOST }}
    SERVER_USER: ${{ vars.SERVER_USER }}
    SERVER_SSH_PORT: ${{ vars.SERVER_SSH_PORT }}
    SERVER_DEPLOY_PATH: ${{ vars.SERVER_DEPLOY_PATH }}
    SERVER_ODOO_URL: ${{ vars.SERVER_ODOO_URL }}
    SERVER_ODOO_DB_NAME: ${{ vars.SERVER_ODOO_DB_NAME }}

jobs:
    unit-test-at-install:
        name: ${{inputs.repo_name}} - Unit test at install
        runs-on: ubuntu-latest
        env:
            commit_context: CI/CD - Unit Test At Install
        environment: ${{inputs.repo_name}}/${{inputs.target_branch}}
        if: inputs.action == 'test' || inputs.action == 'deploy'
        steps:
            - uses: actions/checkout@v4

            - uses: actions/github-script@v7
              name: Create Run Check
              id: create-run-check
              with:
                  github-token: ${{ env.APP_ACCESS_TOKEN }}
                  script: |
                      const {createRunCheck} = await import('${{ github.workspace }}/.github/src/script.js')
                      const inputs = ${{ toJSON(inputs) }}
                      return await createRunCheck(github, inputs, "Unit test at install", "in_progress")

            - name: Checkout private repo
              uses: actions/checkout@v4
              with:
                  repository: ${{ env.REPOSITORY }}
                  ssh-key: ${{ env.SSH_KEY_GITHUB }}
                  path: ${{ env.REPO_PATH }}
                  ref: ${{ inputs.commit_sha }}
                  fetch-depth: 1

            # - name: Login to Docker Hub
            #   uses: docker/login-action@v3
            #   with:
            #       username: ${{ secrets.DOCKERHUB_USERNAME }}
            #       password: ${{ secrets.DOCKERHUB_TOKEN }}

            # - name: Run Unit test cases
            #   id: run_post_install_unit_test
            #   run: |
            #       bash $CICD_SCRIPTS_PATH/run-unit-test.sh "at_install"

            # - uses: actions/checkout@v4
            #   with:
            #       path: ${{ github.sha }}

            - uses: actions/github-script@v7
              id: update-run-check
              with:
                  github-token: ${{ env.APP_ACCESS_TOKEN }}
                  script: |
                      const run_check_id = "${{steps.create-run-check.outputs.result}}"
                      const conclusion = "${{ steps.run_post_install_unit_test.conclusion == 'success' && 'success' || 'failure' }}"
                      console.log(run_check_id)
                      console.log(conclusion)
                      const {updateRunCheck} = await import('${{ github.workspace }}/.github/src/script.js')
                      const inputs = ${{ toJSON(inputs) }}
                      return await updateRunCheck(github, inputs, run_check_id, status="completed", conclusion)
