name: ci/cd
on:
    workflow_call:
        inputs:
            repo_name:
                required: true
                type: string
            action:
                required: true
                type: string
            source_branch:
                required: true
                type: string
            target_branch:
                required: true
                type: string
            commit_sha:
                required: false
                type: string
            pr_number:
                required: false
                type: string
            pr_url:
                required: false
                type: string
            checkout_postfix_path:
                required: false
                type: string
                default: .odoo/source

env:
    # Common variables
    REPO_PATH: ${{github.workspace}}/${{inputs.checkout_postfix_path}}
    SERVER_CICD_SCRIPT_FOLDER: /tmp/odoo/cicd/${{ inputs.repo_name }}/${{inputs.target_branch}}
    ODOO_ADDONS_PATH: ${{github.workspace}}/${{inputs.checkout_postfix_path}}
    ODOO_CONFIG_FILE: ${{github.workspace}}/${{inputs.checkout_postfix_path}}/.github/odoo/etc/odoo.conf
    DOCKER_FOLDER: ${{github.workspace}}/${{inputs.checkout_postfix_path}}/.github/odoo
    ODOO_TEST_DATABASE_NAME: odoo_test
    ODOO_LOG_FILE_CONTAINER: /var/log/odoo/odoo.log
    ODOO_LOG_FILE_HOST: ${{github.workspace}}/${{inputs.checkout_postfix_path}}/.github/odoo/logs/odoo.log

    CICD_ODOO_OPTIONS: ${{github.workspace}}/${{inputs.checkout_postfix_path}}/.github/conf/odoo.json
    CICD_SCRIPTS_PATH: ${{github.workspace}}/${{inputs.checkout_postfix_path}}/.github/scripts
    CICD_UTILS_SCRIPTS_PATH: ${{github.workspace}}/${{inputs.checkout_postfix_path}}/.github/scripts/utils.sh

    # ==== Workflow inputs ====
    SOURCE_BRANCH: ${{ inputs.source_branch }}
    TARGET_BRANCH: ${{ inputs.target_branch }}
    REPOSITORY: ${{ inputs.repo_name }}
    PR_NUMBER: ${{ inputs.pr_number }}
    PR_URL: ${{ inputs.pr_url }}

    # ==== Repository secrets ====
    SSH_KEY_GITHUB: ${{secrets.SSH_KEY_GITHUB}}
    PAT_GITHUB: ${{ secrets.PAT_GITHUB }}
    DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    APP_ACCESS_TOKEN: ${{ secrets.APP_ACCESS_TOKEN }}

    # ==== Environment secrets =====
    TELEGRAM_CHANNEL_ID: ${{secrets.TELEGRAM_CHANNEL_ID}}
    TELEGRAM_TOKEN: ${{secrets.TELEGRAM_TOKEN}}
    SERVER_PRIVATE_KEY: ${{secrets.SERVER_PRIVATE_KEY}}
    SERVER_DB_PASSWORD: ${{secrets.SERVER_DB_PASSWORD}}
    PRIVATE_KEY_FOR_GITHUB_AUTHEN: ${{secrets.PRIVATE_KEY_FOR_GITHUB_AUTHEN}}

    # ===== Environment variables =====
    ODOO_IMAGE_TAG: ${{ vars.ODOO_IMAGE_TAG }}
    DB_IMAGE_TAG: ${{ vars.DB_IMAGE_TAG }}
    SERVER_HOST: ${{ vars.SERVER_HOST }}
    SERVER_USER: ${{ vars.SERVER_USER }}
    SERVER_SSH_PORT: ${{ vars.SERVER_SSH_PORT }}
    SERVER_DEPLOY_PATH: ${{ vars.SERVER_DEPLOY_PATH }}
    SERVER_ODOO_URL: ${{ vars.SERVER_ODOO_URL }}
    SERVER_ODOO_DB_NAME: ${{ vars.SERVER_ODOO_DB_NAME }}

    # ===== Handle Input for actions/github-script ======
    INPUT_REPO_NAME: ${{inputs.repo_name}}
    INPUT_COMMIT_SHA: ${{inputs.commit_sha}}

# fixme: run check didn't show on merge commit
#  try to add commit status or something to CI/CD flow

jobs:
    unit-test-at-install:
        name: ${{inputs.repo_name}} - Unit test at install
        runs-on: ubuntu-latest
        environment: ${{inputs.repo_name}}/${{inputs.target_branch}}
        if: inputs.action == 'test' || inputs.action == 'deploy'
        steps:
            - uses: actions/checkout@v4

            - name: Create Check Run
              uses: ./.github/actions/create-check-run
              id: create-check-run
              with:
                  name: "Unit test at install"
                  job_id: ${{github.job}}

            - name: Checkout Odoo source repository
              uses: actions/checkout@v4
              with:
                  repository: ${{ env.REPOSITORY }}
                  ssh-key: ${{ env.SSH_KEY_GITHUB }}
                  path: ${{ env.REPO_PATH }}
                  ref: ${{ inputs.commit_sha }}
                  fetch-depth: 1

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Run Unit test cases
              id: run_at_install_unit_test
              run: |
                  bash $CICD_SCRIPTS_PATH/run-unit-test.sh "at_install"

            - name: Update Check Run
              uses: ./.github/actions/update-check-run
              if: ${{always()}}
              id: update-check-run
              with:
                  check-run-id: ${{steps.create-check-run.outputs.check-run-id}}
                  conclusion: ${{ steps.run_at_install_unit_test.conclusion == 'success' && 'success' || 'failure' }}

            # - uses: actions/github-script@v7
            #   if: ${{always()}}
            #   with:
            #       github-token: ${{ env.APP_ACCESS_TOKEN }}
            #       script: |
            #           const {default: script} = await import('${{github.workspace}}/script/.github/src/script.js')
            #           const run_check_id = "${{steps.create-check-run.outputs.check-run-id}}"
            #           const conclusion = "${{ steps.run_at_install_unit_test.conclusion == 'success' && 'success' || 'failure' }}"

            #           const inputs = ${{ toJSON(inputs) }}
            #           return await script.updateRunCheck(github, inputs, run_check_id, status="completed", conclusion)

    # unit-test-post-install:
    #     name: ${{inputs.repo_name}} - Unit test post install
    #     runs-on: ubuntu-latest
    #     environment: ${{inputs.repo_name}}/${{inputs.target_branch}}
    #     if: inputs.action == 'test' || inputs.action == 'deploy'
    #     steps:
    #         - uses: actions/checkout@v4

    #         - uses: actions/github-script@v7
    #           id: create-check-run
    #           with:
    #               github-token: ${{ env.APP_ACCESS_TOKEN }}
    #               script: |
    #                   const {default: script} = await import('${{ github.workspace }}/.github/src/script.js')
    #                   return await script.createRunCheck({github, context, core, name: "Unit test post install"})

    #         - name: Checkout Odoo source repository
    #           uses: actions/checkout@v4
    #           with:
    #               repository: ${{ env.REPOSITORY }}
    #               ssh-key: ${{ env.SSH_KEY_GITHUB }}
    #               path: ${{ env.REPO_PATH }}
    #               ref: ${{ inputs.commit_sha }}
    #               fetch-depth: 1

    #         - name: Login to Docker Hub
    #           uses: docker/login-action@v3
    #           with:
    #               username: ${{ secrets.DOCKERHUB_USERNAME }}
    #               password: ${{ secrets.DOCKERHUB_TOKEN }}

    #         - name: Run Unit test cases
    #           id: run_post_install_unit_test
    #           run: |
    #               bash $CICD_SCRIPTS_PATH/run-unit-test.sh "post_install"

    #         - uses: actions/checkout@v4
    #           with:
    #               path: ${{github.workspace}}/script/

    #         - uses: actions/github-script@v7
    #           if: ${{always()}}
    #           with:
    #               github-token: ${{ env.APP_ACCESS_TOKEN }}
    #               script: |
    #                   const {default: script} = await import('${{github.workspace}}/script/.github/src/script.js')
    #                   const run_check_id = "${{steps.create-check-run.outputs.result}}"
    #                   const conclusion = "${{ steps.run_post_install_unit_test.conclusion == 'success' && 'success' || 'failure' }}"

    #                   const inputs = ${{ toJSON(inputs) }}
    #                   return await script.updateRunCheck(github, inputs, run_check_id, status="completed", conclusion)

    # integration-test:
    #     name: ${{inputs.repo_name}} - Integration test
    #     runs-on: ubuntu-latest
    #     if: inputs.action == 'deploy'
    #     environment: ${{inputs.repo_name}}/${{inputs.target_branch}}
    #     env:
    #         LOCAL_BACKUP_FILE_PATH: ${{github.workspace}}/odoo.tar.gz
    #         SERVER_BACKUP_FOLDER: /tmp/odoo/backup/${{inputs.repo_name}}/${{inputs.target_branch}}
    #         SERVER_LATEST_BACKUP_FILE_PATH: /tmp/odoo/backup/${{inputs.repo_name}}/${{inputs.target_branch}}/.odoo.tar.gz
    #         GITHUB_RUN_ATTEMPT: ${{github.run_attempt}}

    #     steps:
    #         - uses: actions/checkout@v4

    #         - uses: actions/github-script@v7
    #           id: create-check-run
    #           with:
    #               github-token: ${{ env.APP_ACCESS_TOKEN }}
    #               script: |
    #                   const {default: script} = await import('${{ github.workspace }}/.github/src/script.js')
    #                   return await script.createRunCheck({github, context, core, name: "Integration Test"})

    #         - name: Checkout Odoo source repository
    #           uses: actions/checkout@v4
    #           with:
    #               repository: ${{ env.REPOSITORY }}
    #               ssh-key: ${{ env.SSH_KEY_GITHUB }}
    #               path: ${{ env.REPO_PATH }}
    #               ref: ${{ inputs.commit_sha }}
    #               fetch-depth: 1

    #         - name: Login to Docker Hub
    #           uses: docker/login-action@v3
    #           with:
    #               username: ${{ secrets.DOCKERHUB_USERNAME }}
    #               password: ${{ secrets.DOCKERHUB_TOKEN }}

    #         - name: "Upload backup script file to server"
    #           uses: appleboy/scp-action@v0.1.7
    #           with:
    #               host: ${{ env.SERVER_HOST }}
    #               username: ${{ env.SERVER_USER }}
    #               key: ${{ secrets.SERVER_PRIVATE_KEY }}
    #               port: ${{ env.SERVER_SSH_PORT }}
    #               source: ${{ env.CICD_SCRIPTS_PATH }}/server-backup.sh
    #               target: ${{ env.SERVER_CICD_SCRIPT_FOLDER }}
    #               strip_components: 4

    #         - name: "Backup Odoo on server"
    #           uses: appleboy/ssh-action@v1.0.0
    #           with:
    #               host: ${{ env.SERVER_HOST }}
    #               username: ${{ env.SERVER_USER }}
    #               key: ${{ secrets.SERVER_PRIVATE_KEY }}
    #               port: ${{ env.SERVER_SSH_PORT }}
    #               command_timeout: 30m
    #               script: |
    #                   bash ${{ env.SERVER_CICD_SCRIPT_FOLDER }}/server-backup.sh "${{env.SERVER_DEPLOY_PATH}}" "${{env.SERVER_ODOO_DB_NAME}}" "${{secrets.SERVER_DB_PASSWORD}}" "${{env.ODOO_IMAGE_TAG}}" ${{ env.GITHUB_RUN_ATTEMPT }} "${{ env.SERVER_BACKUP_FOLDER }}"

    #         - name: "Download backup file"
    #           env:
    #               ssh_key: ${{ secrets.SERVER_PRIVATE_KEY }}
    #           run: |
    #               keyfile_path=${{ github.workspace }}/$(date +%s)_key
    #               bash ${{ env.CICD_UTILS_SCRIPTS_PATH }} exec create_private_keyfile_from_content "$ssh_key" "$keyfile_path"
    #               scp -o StrictHostKeyChecking=no -P ${{ env.SERVER_SSH_PORT }} -i $keyfile_path ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.SERVER_LATEST_BACKUP_FILE_PATH }} ${{ env.LOCAL_BACKUP_FILE_PATH }}

    #         - name: "Run Integration test"
    #           id: run_integration_test
    #           run: |
    #               bash $CICD_SCRIPTS_PATH/run-integration-test.sh ${{env.LOCAL_BACKUP_FILE_PATH}}

    #         - uses: actions/checkout@v4
    #           with:
    #               path: ${{github.workspace}}/script/

    #         - uses: actions/github-script@v7
    #           if: ${{always()}}
    #           with:
    #               github-token: ${{ env.APP_ACCESS_TOKEN }}
    #               script: |
    #                   const {default: script} = await import('${{github.workspace}}/script/.github/src/script.js')
    #                   const run_check_id = "${{steps.create-check-run.outputs.result}}"
    #                   const conclusion = "${{ steps.run_post_install_unit_test.conclusion == 'success' && 'success' || 'failure' }}"

    #                   const inputs = ${{ toJSON(inputs) }}
    #                   return await script.updateRunCheck(github, inputs, run_check_id, status="completed", conclusion)

    # deploy-server:
    #     name: ${{inputs.repo_name}} - Deploy server
    #     runs-on: ubuntu-latest
    #     environment: ${{inputs.repo_name}}/${{inputs.target_branch}}
    #     needs: [unit-test-at-install, unit-test-post-install, integration-test]
    #     env:
    #         SERVER_DEPLOY_SCRIPT_PATH: /tmp/odoo/cicd/${{inputs.repo_name}}/${{inputs.target_branch}}/deploy.sh
    #         SSH_PRIVATE_KEY_GITHUB: /tmp/odoo/cicd/${{inputs.repo_name}}/${{inputs.target_branch}}/github_privatekey
    #         commit_context: CI/CD - Deploy to Server
    #     steps:
    #         - uses: actions/checkout@v4

    #         - uses: actions/github-script@v7
    #           id: create-check-run
    #           with:
    #               github-token: ${{ env.APP_ACCESS_TOKEN }}
    #               script: |
    #                   const {default: script} = await import('${{ github.workspace }}/.github/src/script.js')
    #                   return await script.createRunCheck({github, context, core, name: "Deploy to Server"})

    #         - name: Checkout Odoo source repository
    #           uses: actions/checkout@v4
    #           with:
    #               repository: ${{ env.REPOSITORY }}
    #               ssh-key: ${{ env.SSH_KEY_GITHUB }}
    #               path: ${{ env.REPO_PATH }}
    #               ref: ${{ inputs.commit_sha }}
    #               fetch-depth: 1

    #         - name: "Upload deploy script file to server"
    #           uses: appleboy/scp-action@v0.1.7
    #           with:
    #               host: ${{ env.SERVER_HOST }}
    #               username: ${{ env.SERVER_USER }}
    #               key: ${{ secrets.SERVER_PRIVATE_KEY }}
    #               port: ${{ env.SERVER_SSH_PORT }}
    #               source: ${{ env.CICD_SCRIPTS_PATH }}/server-deploy.sh
    #               target: ${{ env.SERVER_CICD_SCRIPT_FOLDER }}
    #               strip_components: 4

    #         - name: "Upload GitHub private key authen to Server"
    #           env:
    #               private_key_for_github_authen: ${{ secrets.PRIVATE_KEY_FOR_GITHUB_AUTHEN }}
    #               ssh_key: ${{ secrets.SERVER_PRIVATE_KEY }}
    #           run: |
    #               keyfile_path=/tmp/$(date +%s)
    #               private_key_dir=$(dirname $SSH_PRIVATE_KEY_GITHUB)
    #               bash ${{ env.CICD_UTILS_SCRIPTS_PATH }} exec create_private_keyfile_from_content "$ssh_key" "$keyfile_path"
    #               bash ${{ env.CICD_UTILS_SCRIPTS_PATH }} exec create_private_keyfile_from_content "$private_key_for_github_authen" "$SSH_PRIVATE_KEY_GITHUB"
    #               ssh -o StrictHostKeyChecking=no -p ${{ env.SERVER_SSH_PORT }} -i "$keyfile_path" ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p $private_key_dir"
    #               scp -o StrictHostKeyChecking=no -P ${{ env.SERVER_SSH_PORT }} -i $keyfile_path "$SSH_PRIVATE_KEY_GITHUB" ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:$private_key_dir

    #         - name: "Deploy to server"
    #           id: deploy_to_server
    #           uses: appleboy/ssh-action@v1.0.0
    #           env:
    #               SERVER_CUSTOM_ADDONS_PATH: ${{env.SERVER_DEPLOY_PATH}}/..
    #               SERVER_CONFIG_FILE: ${{env.SERVER_DEPLOY_PATH}}/etc/odoo.conf
    #               SERVER_DOCKER_COMPOSE_PATH: ${{env.SERVER_DEPLOY_PATH}}
    #           with:
    #               host: ${{ env.SERVER_HOST }}
    #               username: ${{ env.SERVER_USER }}
    #               key: ${{ secrets.SERVER_PRIVATE_KEY }}
    #               port: ${{ env.SERVER_SSH_PORT }}
    #               script: |
    #                   bash ${{ env.SERVER_CICD_SCRIPT_FOLDER }}/server-deploy.sh "${{env.SERVER_DOCKER_COMPOSE_PATH}}" "${{env.SERVER_CUSTOM_ADDONS_PATH}}" "${{env.SERVER_CONFIG_FILE}}" "${{ env.SSH_PRIVATE_KEY_GITHUB }}" "${{ env.SERVER_ODOO_URL }}" "${{ env.SERVER_ODOO_DB_NAME }}"

    #         - name: The Deploy step has failed
    #           if: ${{ failure() }}
    #           run: |
    #               bash ${{env.CICD_SCRIPTS_PATH}}/post-server-deploy.sh "failed"

    #         - name: The Deploy step has successful
    #           if: ${{ success() }}
    #           run: |
    #               bash ${{env.CICD_SCRIPTS_PATH}}/post-server-deploy.sh "success"

    #         - uses: actions/checkout@v4
    #           with:
    #               path: ${{github.workspace}}/script/

    #         - uses: actions/github-script@v7
    #           if: ${{always()}}
    #           with:
    #               github-token: ${{ env.APP_ACCESS_TOKEN }}
    #               script: |
    #                   const {default: script} = await import('${{github.workspace}}/script/.github/src/script.js')
    #                   const run_check_id = "${{steps.create-check-run.outputs.result}}"
    #                   const conclusion = "${{ steps.run_post_install_unit_test.conclusion == 'success' && 'success' || 'failure' }}"

    #                   const inputs = ${{ toJSON(inputs) }}
    #                   return await script.updateRunCheck(github, inputs, run_check_id, status="completed", conclusion)
