run-name: ${{inputs.repo_name}} - Build docker image
on:
    workflow_dispatch:
        inputs:
            repo_name:
                required: true
                type: string
            commit_sha:
                required: true
                type: string

jobs:
    build-and-publish:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout project source
              uses: actions/checkout@v4
              with:
                  repository: ${{ inputs.repo_name }}
                  ssh-key: ${{ secrets.GH_SSH_KEY }}
                  path: ${{ github.workspace }}
                  ref: ${{ inputs.commit_sha }}
                  fetch-depth: 1

            - name: Login to GitHub container registry
              run: |
                  repo_owner=$(echo "${{inputs.repo_name}}" | cut -d'/' -f1)
                  echo "${{ secrets.GH_TOKEN }}" | docker login ghcr.io -u $repo_owner --password-stdin

            - name: Build image
              run: |
                  cd ${{ github.workspace }}/.build
                  docker build . \
                        --tag ghcr.io/${{inputs.repo_name}} \
                        --label "org.opencontainers.image.source=https://github.com/${{inputs.repo_name}}" \
                        --label "github.run.id=${GITHUB_RUN_ID}"

            - name: Publish image to GitHub container registry
              run: |
                  docker push ghcr.io/${{inputs.repo_name}}

            - uses: actions/checkout@v4

            - name: Remove untagged (old) image from GitHub container registry
              uses: ./.github/actions/delete-untagged-packages
              with:
                  github_token: ${{ secrets.GH_TOKEN }}
                  repo_name: ${{ inputs.repo_name }}

    update-on-server:
        runs-on: ubuntu-latest
        steps:
            - name: Get all branches of project repo
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GH_TOKEN }}
                  script: |
                      const [owner, repo] = "${{ inputs.repo_name }}".split("/");
                      const branches = await github.rest.repos.listBranches({
                        owner,
                        repo,
                      });
                      console.log(branches)

        #fixme: after build success,
        # fixme: second step is trigger update latest image for all server (defined in the environment)
        # https://octokit.github.io/rest.js/v21/#repos-list-branches
        # use this api to get all branches
        # and call workflow docker-update.yml with all the environment created from this one
